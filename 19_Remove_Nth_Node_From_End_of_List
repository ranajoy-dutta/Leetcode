"""
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
  Input: head = [1,2,3,4,5], n = 2
  Output: [1,2,3,5]

Example 2:
  Input: head = [1], n = 1
  Output: []

Example 3:
  Input: head = [1,2], n = 1
  Output: [1]
"""

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        # count total number of nodes in given linkedlist
        total_nodes = 0
        current = head
        while current:
            total_nodes += 1
            current = current.next
        
        # return empty if linkedlist contains single node and that needs to be removed
        if total_nodes==n:
            return head.next
        
        # reach the previous node before the node which needs to be removed
        current=head
        for i in range(total_nodes-n-1):
            current = current.next
        current.next = current.next.next    # change the pointer to skip nth node

        return head
